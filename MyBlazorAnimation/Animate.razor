@using Microsoft.JSInterop

@inject IJSRuntime JSRuntime
@inject IAnimationJSLoader AnimationJSLoader

<style type="text/css">    
    :root {
    --durationInSeconds: @(DurationInSeconds + "s");
    --iterationCount: @_iterationCount;
    --delayInSeconds: @(DelayInSeconds + "s");
    }  
</style>

<div class="animationContainer">
    <div id="@Id" class="hidden">
        @ChildContent
    </div>
</div>

@code {
    public const string bounce = "bounce";
    public const string bounceIn = "bounce-in";
    public const string fadeIn = "fade-in";
    public const string fadeOut = "fade-out";
    public const string fadeInOut = "fade-in-out";
    public const string fadeOutIn = "fade-out-in";
    public const string flip = "flip";
    public const string shake = "shake";
    public const string swing = "swing";
    public const string slideUp = "slide-up";
    public const string slideDown = "slide-down";
    public const string slideLeft = "slide-left";
    public const string slideRight = "slide-right";
    public const string wobble = "wobble";

    private string _iterationCount = "1";

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string Animation { get; set; } = string.Empty;

    [Parameter]
    public double DurationInSeconds { get; set; } = 1;

    [Parameter]
    public double DelayInSeconds { get; set; } = 0;

    [Parameter]
    public int IterationCount 
    {
        get
        {
            return int.Parse(_iterationCount);
        }
        set
        {
            if (value <= 0)
                _iterationCount = "infinite";
            else
                _iterationCount = value.ToString();
        } 
    }

    [Parameter]
    public Func<Task>? OnAnimationTriggered { get; set; }

    [Parameter]
    public string Id { get; set; } = string.Empty;

    [Parameter]
    public bool IsManualTrigger { get; set; } = false;

    public async Task TriggerAnimationBeginAsync()
    {
        await AnimationJSLoader.HideContentAsync(this.Id);
    }

    public async Task TriggerAnimationAsync()
    {
        if (this.IsManualTrigger)
            await TriggerAsync();
    }

    public async Task TriggerAnimationNowAsync()
    {
        await TriggerAsync();
    }

    public async Task TriggerAnimationDynamicAsync(AnimateSettings settings)
    {
        this.ClearAnimation();
        
        var settingsBase = new AnimateSettingsBase
        {
            DelayInSeconds = settings.DelayInSeconds,
            DurationInSeconds = settings.DurationInSeconds,
            IterationCount = settings.IterationCount
        };

        await AnimationJSLoader.SetAnimatePropertiesAsync(settingsBase);

        this.Animation = settings.Animation;
        this.IsManualTrigger = true;
        this.DelayInSeconds = settings.DelayInSeconds;
        this.DurationInSeconds = settings.DurationInSeconds;
        this.IterationCount = settings.IterationCount;
        this.OnAnimationTriggered = settings.OnAnimationTriggered;

        await TriggerAsync();
    }

    private void ClearAnimation()
    {
        this.Animation = string.Empty;
        this.DelayInSeconds = 0;
        this.DurationInSeconds = 1;
        this.IterationCount = 1;
    }

    private async Task TriggerAsync()
    {
        await AnimationJSLoader.TriggerAnimationAsync(this.Id, this.Animation);

        if (this.OnAnimationTriggered != null)
            await this.OnAnimationTriggered.Invoke();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!this.IsManualTrigger)
            await TriggerAsync();
    }
}
